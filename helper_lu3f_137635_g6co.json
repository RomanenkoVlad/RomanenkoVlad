orange / true
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);

const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
banana - false
let array = getRandomArray(); array.forEach(item => console.log(item));

const greet = name => `Hello, ${name}!`;
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));

const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const greet = name => `Hello, ${name}!`;
const squareRoot = num => Math.sqrt(num);
true / 0,72,99,93,77,7,47,34,16,32,58,41,13,68,18,43,80,16,9,87,36,77,63,51,56,24,5,20,95,11,7,93,70,14,99,10,73
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
93,7,57,61,96,28,26 * 63
const getUniqueCharacters = str => Array.from(new Set(str)).join("");

38 * kiwi
const filterEvenNumbers = numbers => numbers.filter(isEven);
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);

33,65,43,52,43,53,10,9 + banana
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);

const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
orange

const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
38 * 33,43,58,45,40,46,69,13,15,26,8,51,29,70,16,30,42,94,36,30,32,64,87,98,38,48,3,28,35,18,73
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
const getUniqueValues = array => [...new Set(array)];
const deepClone = obj => JSON.parse(JSON.stringify(obj));
46,46,56,28,36,57,83,97,95,48,3,35,24,38,43,28,57,41,91,12 - apple

const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);
